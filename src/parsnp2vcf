#!/usr/bin/env python
# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name pangenome_variation
# can be used to endorse or promote products derived from
# this software without prior written permission.
# For written permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called pangenome_variation
# nor may pangenome_variation appear in their names without prior written
# permission of the developers. You should have received a copy
# of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Filter a parSNP VCF file"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'parsnp2vcf')

    parser.add_argument('invcf', action='store',
                        help='parsnp VCF file')
    parser.add_argument('outvcf', action='store',
                        help='output VCF file')
    
    parser.add_argument('--template', action='store',
                        default=None,
                        help='template VCF file')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import vcf
    import sys

    options = get_options()

    # handle empty VCF files
    try:
        reader = vcf.Reader(open(options.invcf))
    except StopIteration:
        # Just write the header of the template
        if options.template is None:
            f = open(options.outvcf, 'w')
            for l in open(options.invcf):
                if l.startswith('#'):
                    f.write(l)
            f.close()
        else:
            f = open(options.outvcf, 'w')
            for l in open(options.template):
                if l.startswith('#'):
                    f.write(l)
            f.close()
        sys.exit(0)
    if options.template is None:
        w = vcf.Writer(open(options.outvcf, 'w'), reader)
    else:
        w = vcf.Writer(open(options.outvcf, 'w'), vcf.Reader(open(options.template)))

    for r in vcf.Reader(open(options.invcf)):
        if r.FILTER is not None and len(r.FILTER) > 0:
            continue
        if r.REF == 'N' or 'N' in r.ALT:
            continue
        w.write_record(r)
